Разбор проекта Транспортный справочник, для формирования общей картины о проекте

Информация из вебинара
Контейнеры:
	1. Использовать deque для хранение остановок Stop
	2. unordered map string_view хранение названия остановок, значение это ссылки на остановки 
	3. маршрут - вектор указателей для хранение 
	4. Инфо о расстоянии -  пары остановок (указатели) и дистанция

Подсказки:
	1. В классе транспортного справочника понадобятся индексы для поиска автобусов и остановок по имени. 
	   Рекомендуется в качестве значений использовать константные указатели: 
	   const Bus* и const Stop*, где Bus и Stop — название структур для маршрута и остановки соответственно.

	2. Предпочитайте unordered_set и unordered_map упорядоченным контейнерам, 
	   чтобы достичь требуемой вычислительной сложности операций вставки и поиска.

	3. Сами остановки и автобусы удобно хранить в deque, чтобы ссылки и указатели на них не инвалидировались при добавлении.

	4. Читайте cin построчно методом std::getline.

	5. Обратите внимание, что в маршруте может фигурировать остановка, объявленная после этого маршрута. 
	   Рекомендуется сохранить запросы, и вначале обработать все запросы остановок, а затем, все запросы маршрутов.

	6. Класс транспортного справочника назовите TransportCatalogue. Он должен иметь методы для выполнения следующих задач:
	   -добавление маршрута в базу,
	   -добавление остановки в базу,
	   -поиск маршрута по имени,
	   -поиск остановки по имени,
	   -получение информации о маршруте.

	7. Разместите код программы в следующих исходных файлах:
	   -transport_catalogue.h, transport_catalogue.cpp — класс транспортного справочника;
	   -geo.h — функции для работы с географическими координатами;
	   -input_reader.h, input_reader.cpp — чтение запросов на заполнение базы;
	   -stat_reader.h, stat_reader.cpp — чтение запросов на вывод и сам вывод;
	   -main.cpp — точка входа.

	8. Добавьте новый индекс в класс транспортного справочника на основе unordered_map. 
	   Он будет хранить расстояние между остановками. В качестве ключа возьмите пару указателей на остановки. 
	   Реализуйте свой хешер для объединения элементов пары. Указатели произвольного типа можно хешировать, используя std::hash<const void*>.

	9. Если для двух остановок расстояние было задано только один раз, то оно считается одинаковым в обоих направлениях. 
	   Если вы не нашли расстояние от остановки x до остановки y, то поищите расстояние от y до x. 
	   
   10. Теперь спецификация остановки будет описывать расстояния до остановок, которые будут определены позже. 
       Для решения проблемы можете обрабатывать ввод в два прохода 
	   — на первом добавить остановку с координатами, 
	   на последующем — расстояния до соседних остановок.

   11. Используйте вложенные пространства имён. 
	   Одно — для всего проекта за исключением функции main. 
	   Вложенные в него пространства — для его составных частей.

   12. Поместите вспомогательные функции и классы, при их наличии, в namespace detail.

   13. Следуйте советам из урока «Практические рекомендации».

   14. Выбирайте для пространств имён понятные названия, которые подскажут, за что отвечает тот или иной модуль транспортного справочника.
